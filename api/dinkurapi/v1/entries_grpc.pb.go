// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EntriesClient is the client API for Entries service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntriesClient interface {
	// Ping pongs.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// GetEntry returns a specific entry by ID. Status 5 "NOT_FOUND" is
	// reported if no entry was found by that ID.
	GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error)
	// GetActiveEntry returns the currently active entry (a entry with no end
	// time). If no such entry exists, then an empty reposne it returned instead.
	GetActiveEntry(ctx context.Context, in *GetActiveEntryRequest, opts ...grpc.CallOption) (*GetActiveEntryResponse, error)
	// GetEntryList queries for a list of entries.
	GetEntryList(ctx context.Context, in *GetEntryListRequest, opts ...grpc.CallOption) (*GetEntryListResponse, error)
	// CreateEntry creates a new entry and stops any currently active entries, and
	// returns the stopped previously active entry (if any) and the newly created
	// entry.
	CreateEntry(ctx context.Context, in *CreateEntryRequest, opts ...grpc.CallOption) (*CreateEntryResponse, error)
	// UpdateEntry alters a entry by ID and returns the entry's before and after
	// state. Status 5 "NOT_FOUND" is reported if no entry was found by that ID.
	UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*UpdateEntryResponse, error)
	// DeleteEntry removes a entry by ID. Status 5 "NOT_FOUND" is=
	// reported if no entry was found by that ID.
	DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*DeleteEntryResponse, error)
	// StopActiveEntry stops the currently active entry and returns that entry
	// (if any).
	StopActiveEntry(ctx context.Context, in *StopActiveEntryRequest, opts ...grpc.CallOption) (*StopActiveEntryResponse, error)
	// StreamAlert streams entry change events: created, updated, deleted.
	StreamEntry(ctx context.Context, in *StreamEntryRequest, opts ...grpc.CallOption) (Entries_StreamEntryClient, error)
}

type entriesClient struct {
	cc grpc.ClientConnInterface
}

func NewEntriesClient(cc grpc.ClientConnInterface) EntriesClient {
	return &entriesClient{cc}
}

func (c *entriesClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/dinkurapi.v1.Entries/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error) {
	out := new(GetEntryResponse)
	err := c.cc.Invoke(ctx, "/dinkurapi.v1.Entries/GetEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) GetActiveEntry(ctx context.Context, in *GetActiveEntryRequest, opts ...grpc.CallOption) (*GetActiveEntryResponse, error) {
	out := new(GetActiveEntryResponse)
	err := c.cc.Invoke(ctx, "/dinkurapi.v1.Entries/GetActiveEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) GetEntryList(ctx context.Context, in *GetEntryListRequest, opts ...grpc.CallOption) (*GetEntryListResponse, error) {
	out := new(GetEntryListResponse)
	err := c.cc.Invoke(ctx, "/dinkurapi.v1.Entries/GetEntryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) CreateEntry(ctx context.Context, in *CreateEntryRequest, opts ...grpc.CallOption) (*CreateEntryResponse, error) {
	out := new(CreateEntryResponse)
	err := c.cc.Invoke(ctx, "/dinkurapi.v1.Entries/CreateEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*UpdateEntryResponse, error) {
	out := new(UpdateEntryResponse)
	err := c.cc.Invoke(ctx, "/dinkurapi.v1.Entries/UpdateEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*DeleteEntryResponse, error) {
	out := new(DeleteEntryResponse)
	err := c.cc.Invoke(ctx, "/dinkurapi.v1.Entries/DeleteEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) StopActiveEntry(ctx context.Context, in *StopActiveEntryRequest, opts ...grpc.CallOption) (*StopActiveEntryResponse, error) {
	out := new(StopActiveEntryResponse)
	err := c.cc.Invoke(ctx, "/dinkurapi.v1.Entries/StopActiveEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) StreamEntry(ctx context.Context, in *StreamEntryRequest, opts ...grpc.CallOption) (Entries_StreamEntryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Entries_ServiceDesc.Streams[0], "/dinkurapi.v1.Entries/StreamEntry", opts...)
	if err != nil {
		return nil, err
	}
	x := &entriesStreamEntryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Entries_StreamEntryClient interface {
	Recv() (*StreamEntryResponse, error)
	grpc.ClientStream
}

type entriesStreamEntryClient struct {
	grpc.ClientStream
}

func (x *entriesStreamEntryClient) Recv() (*StreamEntryResponse, error) {
	m := new(StreamEntryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EntriesServer is the server API for Entries service.
// All implementations must embed UnimplementedEntriesServer
// for forward compatibility
type EntriesServer interface {
	// Ping pongs.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// GetEntry returns a specific entry by ID. Status 5 "NOT_FOUND" is
	// reported if no entry was found by that ID.
	GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error)
	// GetActiveEntry returns the currently active entry (a entry with no end
	// time). If no such entry exists, then an empty reposne it returned instead.
	GetActiveEntry(context.Context, *GetActiveEntryRequest) (*GetActiveEntryResponse, error)
	// GetEntryList queries for a list of entries.
	GetEntryList(context.Context, *GetEntryListRequest) (*GetEntryListResponse, error)
	// CreateEntry creates a new entry and stops any currently active entries, and
	// returns the stopped previously active entry (if any) and the newly created
	// entry.
	CreateEntry(context.Context, *CreateEntryRequest) (*CreateEntryResponse, error)
	// UpdateEntry alters a entry by ID and returns the entry's before and after
	// state. Status 5 "NOT_FOUND" is reported if no entry was found by that ID.
	UpdateEntry(context.Context, *UpdateEntryRequest) (*UpdateEntryResponse, error)
	// DeleteEntry removes a entry by ID. Status 5 "NOT_FOUND" is=
	// reported if no entry was found by that ID.
	DeleteEntry(context.Context, *DeleteEntryRequest) (*DeleteEntryResponse, error)
	// StopActiveEntry stops the currently active entry and returns that entry
	// (if any).
	StopActiveEntry(context.Context, *StopActiveEntryRequest) (*StopActiveEntryResponse, error)
	// StreamAlert streams entry change events: created, updated, deleted.
	StreamEntry(*StreamEntryRequest, Entries_StreamEntryServer) error
	mustEmbedUnimplementedEntriesServer()
}

// UnimplementedEntriesServer must be embedded to have forward compatible implementations.
type UnimplementedEntriesServer struct {
}

func (UnimplementedEntriesServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedEntriesServer) GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntry not implemented")
}
func (UnimplementedEntriesServer) GetActiveEntry(context.Context, *GetActiveEntryRequest) (*GetActiveEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveEntry not implemented")
}
func (UnimplementedEntriesServer) GetEntryList(context.Context, *GetEntryListRequest) (*GetEntryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntryList not implemented")
}
func (UnimplementedEntriesServer) CreateEntry(context.Context, *CreateEntryRequest) (*CreateEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntry not implemented")
}
func (UnimplementedEntriesServer) UpdateEntry(context.Context, *UpdateEntryRequest) (*UpdateEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntry not implemented")
}
func (UnimplementedEntriesServer) DeleteEntry(context.Context, *DeleteEntryRequest) (*DeleteEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntry not implemented")
}
func (UnimplementedEntriesServer) StopActiveEntry(context.Context, *StopActiveEntryRequest) (*StopActiveEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopActiveEntry not implemented")
}
func (UnimplementedEntriesServer) StreamEntry(*StreamEntryRequest, Entries_StreamEntryServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEntry not implemented")
}
func (UnimplementedEntriesServer) mustEmbedUnimplementedEntriesServer() {}

// UnsafeEntriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntriesServer will
// result in compilation errors.
type UnsafeEntriesServer interface {
	mustEmbedUnimplementedEntriesServer()
}

func RegisterEntriesServer(s grpc.ServiceRegistrar, srv EntriesServer) {
	s.RegisterService(&Entries_ServiceDesc, srv)
}

func _Entries_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dinkurapi.v1.Entries/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dinkurapi.v1.Entries/GetEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).GetEntry(ctx, req.(*GetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_GetActiveEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).GetActiveEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dinkurapi.v1.Entries/GetActiveEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).GetActiveEntry(ctx, req.(*GetActiveEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_GetEntryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).GetEntryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dinkurapi.v1.Entries/GetEntryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).GetEntryList(ctx, req.(*GetEntryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_CreateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).CreateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dinkurapi.v1.Entries/CreateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).CreateEntry(ctx, req.(*CreateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dinkurapi.v1.Entries/UpdateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).UpdateEntry(ctx, req.(*UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dinkurapi.v1.Entries/DeleteEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).DeleteEntry(ctx, req.(*DeleteEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_StopActiveEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopActiveEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).StopActiveEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dinkurapi.v1.Entries/StopActiveEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).StopActiveEntry(ctx, req.(*StopActiveEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_StreamEntry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEntryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EntriesServer).StreamEntry(m, &entriesStreamEntryServer{stream})
}

type Entries_StreamEntryServer interface {
	Send(*StreamEntryResponse) error
	grpc.ServerStream
}

type entriesStreamEntryServer struct {
	grpc.ServerStream
}

func (x *entriesStreamEntryServer) Send(m *StreamEntryResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Entries_ServiceDesc is the grpc.ServiceDesc for Entries service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Entries_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dinkurapi.v1.Entries",
	HandlerType: (*EntriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Entries_Ping_Handler,
		},
		{
			MethodName: "GetEntry",
			Handler:    _Entries_GetEntry_Handler,
		},
		{
			MethodName: "GetActiveEntry",
			Handler:    _Entries_GetActiveEntry_Handler,
		},
		{
			MethodName: "GetEntryList",
			Handler:    _Entries_GetEntryList_Handler,
		},
		{
			MethodName: "CreateEntry",
			Handler:    _Entries_CreateEntry_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _Entries_UpdateEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _Entries_DeleteEntry_Handler,
		},
		{
			MethodName: "StopActiveEntry",
			Handler:    _Entries_StopActiveEntry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEntry",
			Handler:       _Entries_StreamEntry_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/dinkurapi/v1/entries.proto",
}
